apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      initContainers:
        - name: prepare
          image: busybox
          command: ["sh", "-c"]
          args:
          - >
            cp -r /charts/*      /charts-writable/;
            cp -r /charts/.[^.]* /charts-writable/;
            cp -r /charts/..?*   /charts-writable/;
            true
          volumeMounts:
          - mountPath: /charts-writable
            name: cdk8s-chart-writable
          - mountPath: /charts
            name: cdk8s-chart
      containers:
      - args:
        - --enable-leader-election
        image: controller:latest
        name: manager
        resources:
          limits:
            cpu: 1000m
            memory: 500Mi
          requests:
            cpu: 500m
            memory: 200Mi
        env:
        - name: CONFIG_PATH
          value: /etc/cdk8s/config.json
        volumeMounts:
        - mountPath: /etc/cdk8s
          name: cdk8s-config
        - mountPath: /cdk8s-template/charts
          name: cdk8s-chart-writable
        - mountPath: /etc/modoki/
          name: modoki-config
      terminationGracePeriodSeconds: 10
      volumes:
        - name: cdk8s-config
          configMap:
            name: cdk8s-config
            items:
              - key: config.json
                path: config.json
        - name: cdk8s-chart-writable
          emptyDir: {}
        - name: cdk8s-chart
          configMap:
            name: cdk8s-chart
            items:
              - key: chart.ts
                path: chart.ts
        - name: modoki-config
          configMap:
            name: modoki-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cdk8s-config
  namespace: system
  labels:
    control-plane: controller-manager
data:
  config.json: |
    {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: modoki-config
  namespace: system
  labels:
    control-plane: controller-manager
data:
  modoki.yaml: |
    builder:
      name: default
      kind: ClusterBuilder
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cdk8s-chart
  namespace: system
  labels:
    control-plane: controller-manager
data:
  chart.ts: |
    import { Construct } from 'constructs';
    import { Chart } from 'cdk8s';
    import * as k8s from '../imports/k8s';
    import { Application } from '../application';

    export interface Config {
        ingressNamespace: string;
        tlsSecretName: string;
        serviceDomain: string;
        ingressAnnotations: { [key: string]: string };
    };

    interface MyChartProp {
        app: Application;
        config: Partial<Config>;
    }

    export default class MyChart extends Chart {
      constructor(scope: Construct, name: string, prop: MyChartProp) {
        const {app, config: rawConfig} = prop;
        super(scope, name);

        const defaultConfig: Config = {
            ingressNamespace: "modoki-operator-system",
            tlsSecretName: "ingress-secret",
            serviceDomain: "svc.cluster.local",
            ingressAnnotations: {
                "kubernetes.io/ingress.class": "nginx",
            }
        }

        const config: Config = {
            ...defaultConfig,
            ...rawConfig
        };


        const labels = {
            "app": `modoki-${app.metadata.name}-app`,
        };
        const annotations = {
            "modoki.tsuzu.dev": `modoki-${app.metadata.name}-app`,
        };
        const metadata = {
            labels,
            annotations,
            namespace: app.metadata.namespace,
        }

        // define resources here

      }
    }
